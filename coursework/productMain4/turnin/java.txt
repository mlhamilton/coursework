==> src/java/murach/business/Cart.java <==
package murach.business;

import java.io.Serializable;
import java.util.ArrayList;

public class Cart implements Serializable {

    private ArrayList<LineItem> items;

    public Cart() {
        items = new ArrayList<LineItem>();
    }

    public ArrayList<LineItem> getItems() {
        return items;
    }

    public int getCount() {
        return items.size();
    }

    public void addItem(LineItem item) {
        String code = item.getProduct().getCode();
        int quantity = item.getQuantity();
        for (int i = 0; i < items.size(); i++) {
            LineItem lineItem = items.get(i);
            if (lineItem.getProduct().getCode().equals(code)) {
                lineItem.setQuantity(quantity);
                return;
            }  
        }
        items.add(item);
    }

    public void removeItem(LineItem item) {
        String code = item.getProduct().getCode();
        for (int i = 0; i < items.size(); i++) {
            LineItem lineItem = items.get(i);
            if (lineItem.getProduct().getCode().equals(code)) {
                items.remove(i);
                return;
            }
        }
    }
}

==> src/java/murach/business/LineItem.java <==
package murach.business;

import java.io.Serializable;
import java.text.NumberFormat;

public class LineItem implements Serializable {

    private Product product;
    private int quantity;

    public LineItem() {}

    public void setProduct(Product p) {
        product = p;
    }

    public Product getProduct() {
        return product;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public int getQuantity() {
        return quantity;
    }

    public double getTotal() {
        double total = product.getPrice() * quantity;
        return total;
    }

    public String getTotalCurrencyFormat() {
        NumberFormat currency = NumberFormat.getCurrencyInstance();
        return currency.format(this.getTotal());
    }
}
==> src/java/murach/business/Product.java <==
package murach.business;

import java.io.Serializable;
import java.text.NumberFormat;

public class Product implements Serializable {
    
    //new variable productId
    private Long productId;
    
    private String code;
    private String description;
    private double price;

    public Product() {

    }

    public Long getId() {
        return productId;
    }
    
    public void setId(Long productId) {
        this.productId = productId;
    }
    
    public void setCode(String code) {
        this.code = code;
    }

    public String getCode() {
        return code;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getDescription() {
        return description;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public double getPrice() {
        return price;
    }

    public String getPriceCurrencyFormat() {
        NumberFormat currency = NumberFormat.getCurrencyInstance();
        return currency.format(price);
    }
    
    //Guessing I'll need to set ArtistName and AlbumName at some point
    public String getArtistName() {
        String artistName =
                description.substring(0, description.indexOf(" - "));
        return artistName;
    }
    
    public String getAlbumName() {
        String albumnName =
                description.substring(description.indexOf(" - ") + 3);
        return albumnName;
        
    }
    
    public String getImageURL() {
        String imageURL = "/musicStore/images/" + code +  "_cover.jpg";
        return imageURL;
    }
    
    public String getProductType() {
        return "Audio CD";
    }
    
}
==> src/java/murach/cart/CartServlet.java <==
package murach.cart;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.*;
import javax.servlet.http.*;

import murach.data.*;
import murach.business.*;

public class CartServlet extends HttpServlet {

 
    // Receive request
    @Override
    protected void doPost(HttpServletRequest request,
            HttpServletResponse response)
            throws ServletException, IOException {
        

        ServletContext sc = getServletContext();
        
        // Get session
        HttpSession session = request.getSession();
        
        // Make ProductIO available
        String path = sc.getRealPath("/WEB-INF/products.txt");
        ProductIO.init(path);

        // Get what the servlet is being asked to do
        String action = request.getParameter("action");
        
        // Set default URL
        
        String url = "/cart.jsp";
        
        // If the action is to displayProducts
        if (action.equals("displayProducts")) {
            
            // Store products in an array "products"
            ArrayList<Product> products = ProductIO.getProducts(path);
                        
            // Set the attributes products so that jsp has info about it
            session.setAttribute("products", products);
            
            // Redirect to cart.jsp
            url = "/cart.jsp";
            sc.getRequestDispatcher(url)
                .forward(request, response);
            
        }
        
        else if (action.equals("editProduct")) {
            
            // Determine product code
            String urlCode = request.getParameter("code");
            
            // Set to the right page
            url = "/editProduct.jsp";
            
            // Get description/price of known urlCode from ProductIO/Product.java
            Product product = ProductIO.selectProduct(urlCode);
            String code = product.getCode();
            String description = product.getDescription();
            Double price = product.getPrice();
                       
            // Set the attributes products so that jsp has info about it
            session.setAttribute("product", product);
            session.setAttribute("code", code);
            session.setAttribute("description", description);
            session.setAttribute("price", price);
            
            sc.getRequestDispatcher(url)
                .forward(request, response);
        }   
        
        else if (action.equals("updateProduct")) {
            
            // Determine product attributes
            String code = request.getParameter("code");
            String description = request.getParameter("description");
            String  newPrice = request.getParameter("price");

            // Convert price into into useable value             
            Double price = Double.parseDouble(newPrice);
            
            //Create new product to store updated values
            Product product = new Product();

            //validate the parameters
            String message;
            String star;
            if (code == null || description == null || newPrice == null ||
                code.isEmpty() || description.isEmpty() || newPrice.isEmpty()) {
                message = "Please fill out the required fields.";
                star = "*";
                url = "editProduct.jsp";
            }
            else {
                message = "";
                star = "";
                product.setDescription(description);
                product.setPrice(price);
                product.setCode(code);
            }
                
            // Call update if Edit was selected
            // Call insert if Add was selected
            //############################################
            //This is toggling addProduct.jsp/editProduct.jsp 
            //############################################
            
            if (ProductIO.exists(code)) {
                ProductIO.updateProduct(product);
            } else {
                ProductIO.insertProduct(product);
            }
            
            
            session.setAttribute("product", product);

            // Redirect
            url = "/editProduct.jsp";
            sc.getRequestDispatcher(url)
            .forward(request, response);
        }
        
        else if (action.equals("viewProducts")) {
            url = "/cart.jsp";
            sc.getRequestDispatcher(url)
            .forward(request, response);
        }
        
        else if (action.equals("deleteProduct")) {
            
            // Determine product code
            String code = request.getParameter("code");
            
            // Get description/price of known urlCode from ProductIO/Product.java
            Product product = ProductIO.selectProduct(code);
            String description = product.getDescription();
            Double price = product.getPrice();
                       
            // Set the attributes products so that jsp has info about it
            session.setAttribute("product", product);
            session.setAttribute("code", code);
            session.setAttribute("description", description);
            session.setAttribute("price", price);
            
            url = "/delete.jsp";
            
            sc.getRequestDispatcher(url)
                .forward(request, response);
        }
        
        else if (action.equals("yesDelete")) {
            
            // Determine product code
            String code = request.getParameter("code");
            
            // Get description/price of known urlCode from ProductIO/Product.java
            String description = request.getParameter("description");
            String  newPrice = request.getParameter("price");

            // Delete product
            Product product = ProductIO.selectProduct(code);
            ProductIO.deleteProduct(product);
            ArrayList<Product> products = ProductIO.selectProducts();
            session.setAttribute("products", products);

            // Redirect
            url = "/cart.jsp";
            sc.getRequestDispatcher(url)
            .forward(request, response);
        }
        
        else if (action.equals("addProduct")) {
            url = "/addProduct.jsp";
                    
            // TODO: Clear form fields of current product object
            
            sc.getRequestDispatcher(url)
            .forward(request, response);
        }
            
    }
 
    @Override
    protected void doGet(HttpServletRequest request,
            HttpServletResponse response)
            throws ServletException, IOException {
        doPost(request, response);
    }
    
}
==> src/java/murach/cart/ProductsServlet.java <==
package murach.cart;

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.ArrayList;

import murach.data.ProductIO;
import murach.business.Product;

public class ProductsServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        //sets cookie?
        HttpSession session = request.getSession();
        
        //generates list of products from products.txt
        String path = getServletContext().getRealPath("/WEB-INF/products.txt");
        ArrayList<Product> products = ProductIO.getProducts(path);
        session.setAttribute("products", products);
        

        String url = "/index.jsp";
        getServletContext()
                .getRequestDispatcher(url)
                .forward(request, response);
    }
}

==> src/java/murach/data/ProductIO.java <==
package murach.data;

import java.io.*;
import java.util.*;

import murach.business.*;

public class ProductIO {
    
    public static ArrayList<Product> products = null;
    private static String filePath = "/WEB-INF/products.txt"; //instead of null
    
    //Called once from the controller based on servlet context
    public static void init(String filePath) {
        ProductIO.filePath = filePath;
    }
    
    public static ArrayList<Product> selectProducts() {
        products = new ArrayList<Product>();
        File file = new File(filePath);
        try {
            BufferedReader in
                    = new BufferedReader(
                        new FileReader(file));
            String line = in.readLine();
            while (line != null) {
                StringTokenizer t = new StringTokenizer(line, "|");
                if (t.countTokens() >= 3) {
                    String code = t.nextToken();
                    String description = t.nextToken();
                    String priceAsString = t.nextToken();
                    double price = Double.parseDouble(priceAsString);
                    
                    Product p = new Product();
                    p.setCode(code);
                    p.setDescription(description);
                    p.setPrice(price);
                    
                    products.add(p);
                }
                line = in.readLine();
            }
            in.close();
            return products;
        } catch (IOException e) {
            System.out.println(e);
            return null;
        }
    }
    
    public static Product selectProduct(String productCode) {
        products = selectProducts();
        for (Product p : products) {
            if (productCode != null
                    && productCode.equalsIgnoreCase(p.getCode())) {
                return p;
                
            }
        }
        return null;
    }
    public static boolean exists(String productCode){
        Product p = selectProduct(productCode);
        if (p != null)return true;
        else return false;
    }
    
    private static void saveProducts(List<Product> products){
        try{
            File file = new File(filePath);
            PrintWriter out
                    = new PrintWriter(
                        new FileWriter(file));
            for (Product p : products) {
                out.println(p.getCode() + "|"
                    + p.getDescription() + "|"
                    + p.getPrice());
               }
            out.close();
        } catch (IOException e) {
            System.out.println(e);
        }
    }
    
    public static void insertProduct(Product product) {
        products = selectProducts();
        products.add(product);
        saveProducts(products);
    }
    
    public static void updateProduct(Product product) {
        products = selectProducts();
        for (int i = 0; i < products.size(); i++) {
            Product p = products.get(i);
            if (product.getCode() != null
                    && product.getCode().equalsIgnoreCase(p.getCode())) {
                products.set(i, product);
            }
        }
        saveProducts(products);
    }
    
    public static void deleteProduct(Product product) {
        products = selectProducts();
        for (int i =  0; i < products.size(); i++) {
            Product p = products.get(i);
            if (product != null
                    && product.getCode().equalsIgnoreCase(p.getCode())) {
                products.remove(i);
                
            }
        }
        saveProducts(products);
        
    }
    
    
    
    
/*  Old code from ch 9.2?  */
    public static Product getProduct(String code, String filepath) {
        try {
            File file = new File(filepath);
            BufferedReader in
                    = new BufferedReader(
                            new FileReader(file));

            String line = in.readLine();
            while (line != null) {
                StringTokenizer t = new StringTokenizer(line, "|");
                String productCode = t.nextToken();
                if (code.equalsIgnoreCase(productCode)) {
                    String description = t.nextToken();
                    double price = Double.parseDouble(t.nextToken());
                    Product p = new Product();
                    p.setCode(code);
                    p.setDescription(description);
                    p.setPrice(price);
                    in.close();
                    return p;
                }
                line = in.readLine();
            }
            in.close();
            return null;
        } catch (IOException e) {
            System.err.println(e);
            return null;
        }
    }

    public static ArrayList<Product> getProducts(String filepath) {
        ArrayList<Product> products = new ArrayList<Product>();
        File file = new File(filepath);
        try {
            BufferedReader in
                    = new BufferedReader(
                            new FileReader(file));

            String line = in.readLine();
            while (line != null) {
                StringTokenizer t = new StringTokenizer(line, "|");
                String code = t.nextToken();
                String description = t.nextToken();
                String priceAsString = t.nextToken();
                double price = Double.parseDouble(priceAsString);
                Product p = new Product();
                p.setCode(code);
                p.setDescription(description);
                p.setPrice(price);
                products.add(p);
                line = in.readLine();
            }
            in.close();
            return products;
        } catch (IOException e) {
            System.err.println(e);
            return null;
        }
    }

}